
#Objetivo: Filtrar los n√∫meros pares de una lista.

# Definimos una funci√≥n que determinar√° si un n√∫mero es par
def funcion_filtro(numero): 
    # Usamos el operador m√≥dulo (%) para verificar si el n√∫mero es divisible entre 2
    # Si el resultado es 0, significa que es par y se retorna True
    return numero % 2 == 0

# Creamos una lista de n√∫meros
numeros = [10, 20, 30, 55, 5, 18]

# Usamos la funci√≥n filter() para aplicar 'funcion_filtro' a cada elemento de la lista
# filter() devuelve solo los elementos para los que la funci√≥n retorna True
llamar_funcion = list(filter(funcion_filtro, numeros))  # Convertimos el resultado en una lista

# Imprimimos el resultado
print(f"Los n√∫meros pares son: {llamar_funcion}")

"""
üß† ¬øC√≥mo funciona filter()?

La funci√≥n filter() en Python sirve para filtrar elementos de una colecci√≥n (como una lista) usando una funci√≥n que devuelve True o False.
	‚Ä¢	üìå Sintaxis: filter(funcion, iterable)
	‚Ä¢	üîç Lo que hace: recorre el iterable y solo deja pasar los elementos que hagan que la funci√≥n retorne True.
	‚Ä¢	üîÅ No modifica la lista original, solo devuelve los elementos que cumplen la condici√≥n.
"""
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# Completa la funci√≥n que verifica si una palabra tiene 5 letras o m√°s, y luego usa filter() para quedarte solo con esas palabras.
# Definimos una funci√≥n que devuelve True si la palabra tiene m√°s de 5 letras

def contar_palabras(palabra): 
    return len(palabra) > 5

# Lista de palabras en una oraci√≥n
frase = ["esta", "es", "una", "palabra", "para", "la", "cual", "se", "utilizara", "un", "len"]

# Aplicamos filter() para quedarnos solo con palabras de m√°s de 5 letras
llamar_funcion_contar = list(filter(contar_palabras, frase))

# Mostramos las palabras filtradas
print(f"Palabras con m√°s de cinco letras: {llamar_funcion_contar}")
#++++++++++++++++++++++++++++++++++++++++++++version mejorada++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

# Funci√≥n que verifica si una palabra tiene m√°s de 5 letras
def contar_palabras(palabra): 
    return len(palabra) > 5

# Frase completa en un solo string
frase = "esta es una palabra para la cual se utilizara un len"

# Separamos la frase en palabras usando split()
palabras = frase.split()  # Esto crea una lista de palabras

# Usamos filter() para quedarnos solo con las palabras largas
palabras_largas = list(filter(contar_palabras, palabras))

# Mostramos el resultado
print(f"Palabras con m√°s de cinco letras: {palabras_largas}")

"""
üß† Explicaci√≥n clave
	‚Ä¢	frase.split() separa las palabras cada vez que encuentra un espacio y las convierte en una lista:
["esta", "es", "una", "palabra", "para", "la", "cual", "se", "utilizara", "un", "len"]
	‚Ä¢	Luego, filter() aplica la funci√≥n contar_palabras() a cada una.
"""

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
"""
Objetivo:
	1.	Usa .split() para separar la frase en palabras.
	2.	Usa filter() para quedarte solo con las palabras que comienzan con la letra ‚Äúp‚Äù.
	3.	Guarda el resultado en una lista y mu√©strala con un print().
"""

# Definimos una funci√≥n llamada 'palabras_p' que recibe una palabra como argumento
# y devuelve True si esa palabra comienza con la letra "p", sin importar si es may√∫scula o min√∫scula.
def palabras_p(i): 
    return i.lower().startswith("p")  # Convertimos la palabra a min√∫sculas y revisamos si empieza con "p"

# Creamos una cadena de texto con varias palabras separadas por espacios
palabras = "puerquito sol palurdo ponce solitario jardin"

# Usamos el m√©todo .split() para dividir la cadena en una lista de palabras individuales
# El separador por defecto es el espacio, as√≠ que se separan todas las palabras
palabra_conSplit = palabras.split()

# Usamos la funci√≥n filter() para quedarnos √∫nicamente con las palabras que comienzan con "p"
# filter aplica la funci√≥n 'palabras_p' a cada elemento de la lista 'palabra_conSplit'
# y mantiene solo aquellos elementos para los que la funci√≥n devuelve True
llamar_funcionP = list(filter(palabras_p, palabra_conSplit))

# Finalmente, imprimimos el resultado, mostrando solo las palabras que empiezan con "p"
print(f"Estas son las palabras que inician con P: {llamar_funcionP}")